// NAIVE APPROACH
// TC: O(N * M) * O(N + M)
// SC: O(N * M)

void setZeroes(vector<vector<int>>& matrix) {
  vector<pair<int, int>> zeroIndices;
  for(int i = 0; i < matrix.size(); i++) {
    for(int j = 0; j < matrix[0].size(); j++) {
      if(matrix[i][j] == 0) {
        zeroIndices.push_back({i, j});
      }
    }
  }
  
  for(int k = 0; k < zeroIndices.size(); k++) {
    int x = zeroIndices[k].first;
    int y = zeroIndices[k].second;
    for(int i = 0; i < matrix.size(); i++) {
      matrix[i][y] = 0;
    }
    for(int j = 0; j < matrix[0].size(); j++) {
      matrix[x][j] = 0;
    }
  }
}

// BETTER APPROACH
// TC: O(N * M)
// SC: O(N + M)

void setZeroes(vector<vector<int>>& matrix) {
  vector<int> rowIndices(matrix.size());
  vector<int> colIndices(matrix[0].size());
  
  for(int i = 0; i < matrix.size(); i++) {
    for(int j = 0; j < matrix[0].size(); j++) {
      if(matrix[i][j] == 0) {
        rowIndices[i] = -1;
        colIndices[j] = -1;
      }
    }
  }
  
  for(int i = 0; i < matrix.size(); i++) {
    for(int j = 0; j < matrix[0].size(); j++) {
      if(rowIndices[i] == -1 || colIndices[j] == -1) {
        matrix[i][j] = 0;
      }
    }
  } 
}

// OPTIMUM APPROACH
// TC: O(N * M)
// SC: O(1)

void setZeroes(vector<vector<int>>& matrix) {
  int r = matrix.size();
  int c = matrix[0].size();
  bool col0 = true;
  
  for(int i = 0; i < r; i++) {
    if(matrix[i][0] == 0)
      col0 = false;
    for(int j = 1; j < c; j++) {
      if(matrix[i][j] == 0) {
        matrix[i][0] = 0;
        matrix[0][j] = 0;
      }
    }
  }
  
  for(int i = r - 1; i >= 0; i--) {
    for(int j = c - 1; j >= 1; j--) {
      if(matrix[0][j] == 0 || matrix[i][0] == 0)
        matrix[i][j] = 0;
    }
    if(!col0)
      matrix[i][0] = 0;
  }
}