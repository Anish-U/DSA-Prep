// OPTIMUM APPROACH
// TC: O(N)
// SC: O(1)

vector<int> upwardDiagonal(int n, vector<vector<int>> A) {
  vector<int> diag;
  for(int k = 0; k < n; k++) {
    int j = 0;
    int i = k;
    while(i >= 0) {
      diag.push_back(A[i][j]);
      i--;
      j++;
    }
  }
  for(int k = 1; k < n; k++) {
    int i = n-1;
    int j = k;
    while(j <= n-1) {
      diag.push_back(A[i][j]);
      i--;
      j++;
    }
  }
  return diag;
}


// REVERSE DIRECTION
// TC: O(N)
// SC: O(1)

vector<int> downwardDiagonal(int n, vector<vector<int>> A) {
  vector<int> diag;
  for(int k = 0; k < n; k++) {
    int i = 0;
    int j = k;
    while(j >= 0) {
      diag.push_back(A[i][j]);
      i++;
      j--;
    }
  }
  for(int k = 1; k < n; k++) {
    int j = n-1;
    int i = k;
    while(i <= n-1) {
      diag.push_back(A[i][j]);
      i++;
      j--;
    }
  }
  return diag;
}