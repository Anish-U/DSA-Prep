// NAIVE APPROACH
// TC: O(N)- Storing + O(N * log(N))- Sort
// SC: O(N)- Vector

int kthSmallest(int mat[MAX][MAX], int n, int k) {
  vector<int> values;
  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      values.push_back(mat[i][j]);
    }
  }
  sort(values.begin(), values.end());
  return values[k-1];
}

// BETTER APPROACH
// TC: O(N * log(max - min))

class Solution {
public:
  int kthSmallest(vector<vector<int>>& matrix, int k) {
    int n = matrix.size();
    if(n == 0)
      return -1;
    int low = matrix[0][0], high = matrix[n-1][n-1], ans = -1;
    while(low <= high){
      int mid = low + ((high-low)>>1);
      int count = 0;
      for(int i = 0; i < n; ++i){
        count += upper_bound(matrix[i].begin(), matrix[i].end(), mid) - matrix[i].begin(); // stl is very helpful
      }
      if(count < k){
        low = mid+1;
      }
      else if(count == k){ // storing the mid as the ans because this mid can be or not in the matrix
        ans = mid;
        high = mid-1;
      }
      else if(count > k) { // to understand why ans is stored this time, use this eg: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 7, the reason is due to multiple occurences of 13, count will remain 8 finally so ans = -1
        ans = mid;
        high = mid-1;
      }
    }
    return ans;
  }
};


// OPTIMUM APPROACH
// TC: O(K * log(n))
// SC: O(n)

int kthSmallest(int mat[MAX][MAX], int n, int k) {
  priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> minHeap;
  for(int i = 0; i < n; i++) {
    minHeap.push({mat[i][0], {i, 0}});
  }
  for(int temp = 0; temp < k - 1; temp++) {
    int i = minHeap.top().second.first;
    int j = minHeap.top().second.second;
    minHeap.pop();
    if(j < n - 1){
      minHeap.push({mat[i][j+1], {i, j + 1}});
    }
  }
  return minHeap.top().first;
}