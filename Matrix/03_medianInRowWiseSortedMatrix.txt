// NAIVE APPROACH
// TC: O(N * M)- Pushing + O((N*M)*log(N*M))- Sort
// SC: O(N*M)- Vector

int median(vector<vector<int>> &matrix, int r, int c){
  vector<int> values;
  for(int i = 0; i < r; i++) {
    for(int j = 0; j < c; j++) {
      values.push_back(matrix[i][j]);
    }
  }
  sort(values.begin(), values.end());
  return values[values.size() / 2];
}

// OPTIMUM APPROACH
// TC: O(32 * N * log(C))
// SC: O(1)

int binaryMedian(int m[][MAX], int r ,int c) {
  int min = INT_MAX, max = INT_MIN;
  for (int i=0; i<r; i++) {
    // Finding the minimum element
    if (m[i][0] < min)
      min = m[i][0];

    // Finding the maximum element
    if (m[i][c-1] > max)
      max = m[i][c-1];
  }

  int desired = (r * c + 1) / 2;
  while (min < max) {
    int mid = min + (max - min) / 2;
    int place = 0;

    // Find count of elements smaller than mid
    for (int i = 0; i < r; ++i)
      place += upper_bound(m[i], m[i]+c, mid) - m[i];
    if (place < desired)
      min = mid + 1;
    else
      max = mid;
  }
  return min;
}