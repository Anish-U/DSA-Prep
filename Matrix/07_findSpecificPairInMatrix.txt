// NAIVE APPROACH
// TC: O(N^2)
// SC: O(1)

int findMaxValue(vector<vector<int>> mat) {
  int maxValue = INT_MIN;
  int N = mat.size();

  for (int a = 0; a < N - 1; a++)
    for (int b = 0; b < N - 1; b++)
      for (int d = a + 1; d < N; d++)
        for (int e = b + 1; e < N; e++)
          if (maxValue < (mat[d][e] - mat[a][b]))
            maxValue = mat[d][e] - mat[a][b];

  return maxValue;
}

// OPTIMUM APPROACH
// TC: O(N)
// SC: O(N)

int findMaxValue(int mat[][N]) {

  int maxValue = INT_MIN;
  int maxArr[N][N];
  
  maxArr[N-1][N-1] = mat[N-1][N-1];

  int max = mat[N-1][N-1];  // Initialize max
  for (int j = N - 2; j >= 0; j--) {
    if (mat[N-1][j] > max)
      max = mat[N - 1][j];
    maxArr[N-1][j] = max;
  }

  max = mat[N - 1][N - 1];  // Initialize max
  for (int i = N - 2; i >= 0; i--) {
    if (mat[i][N - 1] > max)
      max = mat[i][N - 1];
    maxArr[i][N - 1] = max;
  }

  for (int i = N-2; i >= 0; i--) {
    for (int j = N-2; j >= 0; j--) {
      if (maxArr[i+1][j+1] - mat[i][j] > maxValue)
        maxValue = maxArr[i + 1][j + 1] - mat[i][j];
      maxArr[i][j] = max(mat[i][j], max(maxArr[i][j + 1], maxArr[i + 1][j]) );
    }
  }
  return maxValue;
}