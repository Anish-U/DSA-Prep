// NAIVE APPROACH
// TC: O(N*M)
// SC: O(1)

int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
  int maxCount = 0;
  int maxRow = -1;
  for(int i = 0; i < n; i++) {
    int counter{};
    for(int j = 0; j < m; j++) {
      if(arr[i][j])
        counter++;
    }
    if(counter > maxCount) {
    maxCount = counter;
    maxRow = i;
    }
  }
  return maxRow;
}


// BETTER APPROACH
// TC: O(N * log(M))
// SC: O(1)

int _findFirst(vector<int> arr, int low, int high) {
  if(high >= low) {
    int mid = low + (high - low) / 2;
    if((mid == 0 || arr[mid - 1] == 0) && arr[mid] == 1)
      return mid;
    else if(arr[mid] == 0)
      return _findFirst(arr, mid + 1, high);
    else
      return _findFirst(arr, low, mid - 1);
  }
  return -1;
}
    
int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
  int maxValue = -1;
  int maxRow = -1;
  for(int i = 0; i < n; i++) {
    int index = _findFirst( arr[i], 0, m-1);
    if(index != -1 && m - index > maxValue) {
      maxValue = m - index;
      maxRow = i;
    }
  }
  return maxRow;
}


// OPTIMUM APPROACH
// TC: O(N + M)
// SC: O(1)

int _findFirst(vector<int> arr, int low, int high) {
  if(high >= low) {
    int mid = low + (high - low) / 2;
    if((mid == 0 || arr[mid - 1] == 0) && arr[mid] == 1)
      return mid;
    else if(arr[mid] == 0)
      return _findFirst(arr, mid + 1, high);
    else
      return _findFirst(arr, low, mid - 1);
  }
  return -1;
}

int rowWithMax1s(vector<vector<int> > arr, int n, int m) {
  int maxRow = -1;
  int j = _findFirst(arr[0], 0, m - 1);
  if(j == -1)
    j = m - 1;

  for(int i = 0; i < n; i++) {
    while(j >= 0 && arr[i][j] == 1) {
      j--;
      maxRow = i;
    }
  }
  return maxRow;
}