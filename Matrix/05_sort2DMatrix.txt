// NAIVE APPROACH
// TC: O(N)- Storing + O(N * log(N))- Sort
// SC: O(N)- Vector

vector<vector<int>> sortedMatrix(int n, vector<vector<int>> mat) {
  vector<int> values;
  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      values.push_back(mat[i][j]);
    }
  }
  sort(values.begin(), values.end());
  int k = 0;
  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      mat[i][j] = values[k++];
    }
  }
  return mat;
}

// OPTIMUM APPROACH - MERGE K SORTED ARRAYS APPROACH
// TC: O(N * log(n)) => O(N * log(k))- Merge  
// SC: O(n)

vector<vector<int>> sortedMatrix(int n, vector<vector<int>> mat) {
  vector<int> values;
  priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> minHeap;
  for(int i = 0; i < n; i++) {
    minHeap.push({mat[i][0], {i, 0}});
  }
  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      mat[i][j] = minHeap.top().first;
      int x = minHeap.top().second.first;
      int y = minHeap.top().second.second;
      minHeap.pop();
      if(y < n - 1){
        minHeap.push({mat[x][y + 1], {x, y + 1}});
      }
    }
  }
  return mat;
}
