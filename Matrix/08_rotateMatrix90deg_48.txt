// NAIVE APPROACH
// TC: O(N)
// SC: O(N)

void rotate(vector<vector<int>>& matrix) {
  int n = matrix.size();
  vector<vector<int>> rotated( n , vector<int> (n, 0));
  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      rotated[j][n-1-i] = matrix[i][j];
    }
  }
  matrix = rotated;
}


// OPTIMUM APPROACH I
// TC: O(N)
// SC: O(1)

void rotate(vector<vector<int>>& matrix) {
  int n = matrix.size();
  for(int i = 0; i < (n + 1)/2; i++) {
    for(int j = 0; j < n / 2; j++) {
      int temp = matrix[n - j - 1][i];
      matrix[n - 1 - j][i] = matrix[n - 1 - i][n - 1 - j];
      matrix[n - 1 - i][n - 1 - j] = matrix[j][n - 1 - i];
      matrix[j][n - 1 - i] = matrix[i][j];
      matrix[i][j] = temp;
    }
  }
}


// OPTIMUM APPROACH II
// TC: O(N)
// SC: O(1)

void rotate(vector<vector<int>>& matrix) {
  int n = matrix.size();
  
  // Transpose
  for(int i = 0; i < n; ++i){
    for(int j = i; j < n; ++j){
      swap(matrix[i][j], matrix[j][i]);
    }
  }

  // Reverse Cols
  for(int i = 0; i < n; ++i){
    reverse(matrix[i].begin(), matrix[i].end());
  }
}