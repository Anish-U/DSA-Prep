// NAIVE APPROACH
// TC: O(N^2)
// SC: O(1)

int diagonalSum(vector<vector<int>>& mat) {
  int n = mat.size();
  int sum{};
  for(int i = 0; i < n; i++) {
    for(int j = 0; j < n; j++) {
      if(i == j || i + j == n-1)
        sum += mat[i][j];
    }
  }
  return sum;
}


// OPTIMUM APPROACH
// TC: O(N)
// SC: O(1)

int diagonalSum(vector<vector<int>>& mat) {
  int n = mat.size();
  int i{}, j{}, sum{};
  while(i < n && j < n)
    sum += mat[i++][j++];
  i = 0;
  j = n - 1;
  while(i < n && j >= 0)
    sum += mat[i++][j--];
  
  if(n % 2 != 0)
    sum -= mat[n / 2][n / 2];

  return sum;
}