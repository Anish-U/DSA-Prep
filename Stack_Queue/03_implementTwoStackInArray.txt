// NAIVE APPROACH
// Dividing the array to two halves

class twoStacks {
  int size, top1, top2;
  int* arr;
  
  twoStacks(int n) {
    size = n;
    arr = new int[n];
    top1 = 0;
    top2 = n/2 + 1;
  }

  void push1(int x) {
    if(top1 > size/2) {
      cout << "Stack Overflow";
    }
    else 
      arr[top1++];
  }

  void push2(int x) {
    if(top2 > size - 1) {
      cout << "Stack Overflow";
    }
    else 
      arr[top2++];
  }

  int pop1 {
    if(top1 < 0) {
      cout << "Stack Underflow";
      exit(1);
    }
    else
      return arr[top1--];
  }

  int pop2 {
    if(top2 < size - 1) {
      cout << "Stack Underflow";
      exit(1);
    }
    else
      return arr[top2--];
  }
}

// OPTIMUM APPROACH
// Starting from two ends of array

class twoStacks {
  int size, top1, top2;
  int* arr;
  
  twoStacks(int n) {
    size = n;
    arr = new int[n];
    top1 = 0;
    top2 = size - 1;
  }
  
  push1(int x) {
    if (top1 < top2 - 1) {
      top1++;
      arr[top1] = x;
    }
    else {
      cout << "Stack Overflow";
      exit(1);
    }
  }
   
  void twoStacks ::push2(int x) {
    if (top1 < top2 - 1) {
      top2--;
      arr[top2] = x;
    }
    else {
      cout << "Stack Overflow";
      exit(1);
    }
  }
   
  int twoStacks ::pop1() {
    if (top1 >= 0) {
      int x = arr[top1];
      top1--;
      return x;
    }
    else {
      cout << "Stack UnderFlow";
      exit(1);
    }
  }

  int twoStacks :: pop2() {
    if (top2 < size) {
      int x = arr[top2];
      top2++;
      return x;
    }
    else {
      cout << "Stack UnderFlow";
      exit(1);
    }
  }
}