// OPTIMUM APPROACH

void push(int data) {
  DLLNode* newNode = new DLLNode();
  newNode->val = data;
  newNode->prev = NULL;
  newNode->next = head;
  count++;

  if(count == 1) {
    mid = newNode;
  }
  else {
    head->prev = newNode;
    if(!count%2) 
      mid = mid->prev;
  }
  head = newNode;
}

int pop() {
  if(count == 0) {
    cout << "Stack Empty";
    exit(1);
  }
  int data = head->val;
  DLLNode* temp = head;
  head = head->next;

  if(head)
    head->prev = NULL;
  count--;

  if(count%2) {
    mid = mid->next;
  }
  delete(temp);

  return data;
}

int findMiddle() {
  if(count == 0) {
    cout << "Stack Empty";
    exit(1);
  }
  else {
    return mid->val;
  }
}

void deleteMiddle() {
  if(count == 0) {
    cout << "Stack Empty";
    exit(1);
  }
  DLLNode* temp = mid;
  int data = mid->val;
  count--;
  if(count == 1) {
    head = head->next;
    mid = head;
  }
  else if(count > 0) {
    mid->prev->next = mid->next;
    mid->next->prev = mid->prev;
    if(count%2){
      mid = mid->next;
    }
    else {
      mid = mid->prev;
    }
  }
  delete(temp);
  return data;
}

