// OPTIMUM APPROACH
// TC: O(M + N)=> O(M) * O(1) + O(M) => M- size of nums1 & N- size of num2 
// SC: O(N)

vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
  unordered_map<int, int> mp;
  stack<int> s;
  vector<int>result(nums1.size(), -1);
  for(int i = 0; i < nums2.size(); i++) {
    while(!s.empty() && nums2[i] > s.top()) {
      mp[s.top()] = nums2[i];
      s.pop();
    }
    s.push(nums2[i]);
  }
  
  for(int i = 0; i < nums1.size(); i++) {
    if(mp.count(nums1[i])) {
      result[i] = mp[nums1[i]];
    }
  }
  
  return result;
}