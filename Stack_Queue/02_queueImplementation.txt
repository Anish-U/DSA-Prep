// USING ARRAY

int queue[100], n = 100, front = -1, rear = - 1;

void enqueue(int val) {
  if(rear == n - 1)
    cout << "Queue Overflow";
  else {
    queue[rear++] = val;
  }
}

int dequeue() {
  if(front == -1 || front > rear) {
    cout << "Queue Underflow";
    exit(1);
  }
  else
    return queue[front++];
}

void display() {
  if(front == -1)
    cout << "Queue Empty";
  else {
    for(int i = front; i <= rear; i++)
      cout << queue[i] << " ";
  }
}

int frontEle() {
  if(front == -1) {
    cout << "Queue Empty";
    exit(1);
  }
  else
    return queue[front];
}


// USING LINKED LIST

struct Node {
  int val;
  Node* next;
}

Node* front = NULL;
Node* rear = NULL;

bool isEmpty() {
  return front == NULL && rear == NULL;
}

void enqueue(int data) {
  Node* temp = new Node();
  temp->val = data;
  temp->next = NULL;

  if(!front) {
    front = temp; 
    rear = temp;
  }
  else {
    rear->next = temp;
    rear = temp;
  }
}

void dequeue() {
  if(isEmpty()) {
    cout << "Queue Empty";
  }
  else {
    if(front == rear) {
      delete(front);
      front = rear = NULL;
    }
    else {
      Node* temp = front;
      front = front->next;
      delete(temp);
    }
  }
}

int showFront() {
  if(isEmpty()) {
    cout << "Queue Empty";
  }
  else {
    return front->val;
  }
}