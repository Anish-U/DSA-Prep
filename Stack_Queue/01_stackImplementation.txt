// USING ARRAY

int stack[100], n = 100, top = -1;

void push(int val) {
  if(top > n - 1)
    cout << "Stack Overflow";
  else
    stack[top++] = val;
}

int pop() {
  if(isEmpty()) {
    cout << "Stack Underflow";
    exit(1);
  }
  else
    return stack[top--];
}

int peek() {
  if(isEmpty()) {
    cout << "Stack Empty";
    exit(1);
  }
  else
    return stack[top];
}

void display() {
  if(isEmpty())
    cout << "Stack Empty";
  else {
    for(int i = top; i >= 0; i--)
      cout << stack[i] << " ";
  }
}

bool isEmpty() {
  return top == -1;
}

bool isFull() {
  return top == n - 1;
}


// USING LINKED LIST

struct Node {
  int val;
  Node* next;
}

Node* top = NULL;

bool isEmpty() {
  return top == NULL;
}

void push(int data) {
  Node* temp = new Node();
  temp->val = data;
  temp->next = top;
  top = temp;
}

void pop() {
  if(isEmpty()) {
    cout << "Stack Empty";
    exit(1);
  }
  else {
    Node* temp = top;
    top = top->next;
    int data = temp->val;
    delete(temp);
    return data;
  }
}

void peek() {
  if(isEmpty()) {
    cout << "Stack Empty";
    exit(1);
  }
  else
    return top->data;
}