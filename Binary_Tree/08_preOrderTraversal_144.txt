// RECURSIVE APPROACH
// TC: O(N) => Visiting all nodes
// SC: O(N) => O(height) => height â‰ˆ no of nodes - Skewed Tree

void _preorderTraversal(TreeNode* root, vector<int>& nodeVector) {
    if(root == NULL)
        return;
    // 1. Visit the root.
    nodeVector.push_back(root->val);

    // 2. Traverse the left subtree, i.e., call Inorder(left-subtree)
    _preorderTraversal(root->left, nodeVector);
    
    // 3. Traverse the right subtree, i.e., call Inorder(right-subtree)
    _preorderTraversal(root->right, nodeVector);
}
vector<int> preorderTraversal(TreeNode* root) {
    vector<int> nodeVector;
    _preorderTraversal(root, nodeVector);
    
    return nodeVector;
}


// ITERATIVE APPROACH
// TC: O(N) => Visiting all nodes
// SC: O(N) 

vector<int> preorderTraversal(TreeNode* root) {
    if (root == NULL)
        return {};

    vector<int> nodeVector;
    stack<TreeNode*> nodeStack;
    nodeStack.push(root);

    while (!nodeStack.empty())
    {
        TreeNode* curr = nodeStack.top();
        nodeStack.pop();

        nodeVector.push_back(curr->val);

        if (curr->right) {
            nodeStack.push(curr->right);
        }

        if (curr->left) {
            nodeStack.push(curr->left);
        }
    }
    return nodeVector;
}
