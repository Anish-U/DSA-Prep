// ITERATIVE APPROACH
// TC: O(N) => O(N)- Visiting all nodes
// SC: O(N) 


TreeNode* addOneRow(TreeNode* root, int val, int depth) {
  if(depth == 1) {
    TreeNode* newNode = new TreeNode(val);
    newNode->left = root;
    return newNode;
  }
  int d = 1;
  queue<TreeNode*> nodeQueue;
  nodeQueue.push(root);
  while(d < depth - 1) {
    int size = nodeQueue.size();
    for(int i = 0; i < size; i++) {
        TreeNode* curr = nodeQueue.front();
        nodeQueue.pop();
        if(curr->left) 
          nodeQueue.push(curr->left);
        if(curr->right) 
          nodeQueue.push(curr->right);             
    } d++;           
  }
  while(!nodeQueue.empty()) {
    TreeNode* curr = nodeQueue.front();
    nodeQueue.pop();
    
    TreeNode *leftNode = curr->left;
    curr->left = new TreeNode(val);
    curr->left->left= leftNode;

    TreeNode* rightNode = curr->right;
    curr->right = new TreeNode(val);
    curr->right->right = rightNode;
  } 
  return root;
}


// RECURSIVE APPROACH
// TC: O(N) => O(N)- Visiting all nodes
// SC: O(N) 


void _addOneRow(TreeNode* root, int val, int depth, int n) {
  if(!root)
    return;
  if(depth == n - 1) {
    TreeNode* temp = root->left;
    root->left = new TreeNode(val);
    root->left->left = temp;
    temp = root->right;
    root->right = new TreeNode(val);
    root->right->right = temp;
  } 
  else {
    _addOneRow(root->left, val, depth + 1, n);
    _addOneRow(root->right, val, depth + 1, n);
  }
}
TreeNode* addOneRow(TreeNode* root, int val, int depth) {
  if(depth == 1) {
    TreeNode* newNode = new TreeNode(val);
    newNode->left = root;
    return newNode;
  }
  _addOneRow(root, val, 1, depth);
  return root;
}