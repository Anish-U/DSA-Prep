// RECURSIVE APPROACH - DFS
// TC: O(N) => Visiting all nodes
// SC: O(N) => O(height) => height â‰ˆ no of nodes - Skewed Tree

int leafLevel = 0;
bool sameLevel = true;

void _dfs(Node* root, int level) {
  if(!root)
    return;
  if(!root->left && !root->right) {
    if(leafLevel == 0) {
      leafLevel = level;
    }
  else {
    if(leafLevel != level)
      sameLevel = false;
    }
  }
  _dfs(root->left, level + 1);
  _dfs(root->right, level + 1);
}

bool check(Node *root) {
  if(!root)
    return true;
  _dfs(root, 0);

  return sameLevel;
}


// ITERATIVE APPROACH - BFS
// TC: O(N) => Visiting all nodes
// SC: O(N) => O(N/2)- N/2 is the no of nodes in the last level of full tree

bool check(Node *root) {
  if(!root)
    return true;

  queue<Node*> nodeQueue;
  nodeQueue.push(root);

  while(!nodeQueue.empty()) {
    int size = nodeQueue.size();
    bool isLeaf = false;
    for(int i = 0; i < size; i++) {
      Node* curr = nodeQueue.front();
      nodeQueue.pop();
      if(i == 0) {
        if(!curr->left && !curr->right)
        isLeaf = true;
      }
      if((curr->right || curr->left) && isLeaf)
        return false;

      if(!curr->right && !curr->left && !isLeaf)
        return false;

      if(curr->right)
        nodeQueue.push(curr->right);

      if(curr->left)
        nodeQueue.push(curr->left);
    }
  }
  return true;
}